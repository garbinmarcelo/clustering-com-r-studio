a <- list(b=1)
class(a) <- "myclass"
myfinction <- function(x,...) UseMehod("myfunction")
View(myfinction)
myfunction.myclass <- function(x, ...) x$b+1
View(myfunction.myclass)
View(myfinction)
View(myfinction)
myfunction <- function(x,...) UseMehod("myfunction")
View(myfunction)
View(myfunction.myclass)
View(myfunction)
View(myfinction)
myfunction(a)
myfunction <- function(x,...) UseMethod("myfunction")
myfunction.myclass <- function(x, ...) x$b+1
myfunction(a)
a <- 2
setwd("C:/Users/Evaristo/Desktop/Doc Orientada II/wine")
#carragamento do dataset
Iris = read.csv("iris_data.csv", h = T)
#carragamento do dataset
Iris = read.csv("wine.data", h = T)
Iris2 = na.omit(Iris)
View(Iris2)
Wine = read.csv("wine.data", h = T)
Wine2 = na.omit(Iris)
View(Wine2)
ine2.features = Wine2
Wine2.features$class <- NULL
View(Wine2.features)
#preparação dos dados para clusterização: Atributo alvo = classe. (Atributo é removido do dataset para realizar a clusterização)
Wine2.features = Wine2
Wine2.features$class <- NULL
Wine = read.csv("wine.data", h = T)
Wine2 = na.omit(Wine)
#preparação dos dados para clusterização: Atributo alvo = classe. (Atributo é removido do dataset para realizar a clusterização)
Wine2.features = Wine2
Wine2.features$class <- NULL
View(Wine2.features)
#clusterização dos dados utilizando o algoritmo kmeans
results <- kmeans(Wine2.features, 3, iter.max = 5)
results
#visualização das informações do clusters resultantes
table(Wine2$class, results$cluster)
#pplotagem do resultados: neste exemplo (petal.length x petal.width)
plot(Wine2.features[], col = results$cluster)
#pplotagem do resultados: neste exemplo (petal.length x petal.width)
plot(Wine2.features[c("Alcohol", "Magnesium")], col = results$cluster)
results <- kmeans(Wine2.features, 3, iter.max = 10)
results
#visualização das informações do clusters resultantes
table(Wine2$class, results$cluster)
#pplotagem do resultados: neste exemplo (petal.length x petal.width)
plot(Wine2.features[], col = results$cluster)
#pplotagem do resultados: neste exemplo (petal.length x petal.width)
plot(Wine2.features[c("Alcohol", "Magnesium")], col = results$cluster)
#carragamento do dataset
Wine = read.csv("wine.data", h = T)
Wine2 = na.omit(Wine)
View(Wine2)
#preparação dos dados para clusterização: Atributo alvo = classe. (Atributo é removido do dataset para realizar a clusterização)
Wine2.features = Wine2
Wine2.features$class <- NULL
View(Wine2.features)
d <- dist(Wine2.features)
d
results <- hclust(d, "single")
plot(results)
rect.hclust(results, k = 4, border = "red")
clusters <- cutree(results, 4)
clusters
#pplotagem do resultados: neste exemplo (petal.length x petal.width)
plot(Wine2[], col = clusters)
#pplotagem do resultados: neste exemplo (petal.length x petal.width)
plot(Wine2.features[], col = clusters)
#pplotagem do resultados: neste exemplo (petal.length x petal.width)
plot(Wine2.features[c("Alcohol", "Magnesium")], col = clusters)
library(fpc)
#carragamento do dataset
Wine = read.csv("wine.data", h = T)
Wine2 = na.omit(Wine)
View(Wine2)
#preparação dos dados para clusterização: Atributo alvo = classe. (Atributo é removido do dataset para realizar a clusterização)
Wine2.features = Wine2
Wine2.features$class <- NULL
View(Wine2.features)
Wine = read.csv("wine.data", h = T)
Wine2 = na.omit(Wine)
View(Wine2)
#preparação dos dados para clusterização: Atributo alvo = classe. (Atributo é removido do dataset para realizar a clusterização)
Wine2.features = Wine2
Wine2.features$class <- NULL
View(Wine2.features)
#install.packages("dbscan")
library(dbscan)
kNNdistplot(Wine2.features, k = 3)
results <- dbscan(Wine2.features, eps = 48, minPts = 3)
results
#pplotagem do resultados: neste exemplo (petal.length x petal.width)
plot(Wine2[], col = results$cluster)
#pplotagem do resultados: neste exemplo (petal.length x petal.width)
plot(Wine2.features[c("Alcohol", "Magnesium")], col = results$cluster)
#plotagem dos dados utilizando coordenadadas discriminantes em um arquyivo .png
png(file="resultado_dbscan.png", width=1000, height=700)#salva em png plot
plotcluster(Wine2.features, results$cluster, method = "dc")
results_to_save = data.frame(Iris2.features, results$cluster)
results_to_save = data.frame(Wine2.features, results$cluster)
#gravação dos resultados em arquivos
write.csv(results_to_save, file = "resultado_dbscan.csv")
dev.off()
# Define pasta de trabalho e localização do arquivo dataset
setwd("D:/_dev/Web/www/_mestrado/agrupamento-com-r-studio/Wine")
library(fpc)
#carragamento do dataset
Wine = read.csv("wine.data", h = T)
